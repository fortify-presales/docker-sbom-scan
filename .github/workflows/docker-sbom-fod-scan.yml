
name: Docker SBOM Scan with Fortify

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    paths-ignore:
  #    - .github/workflows/**
      - 'README.md'
      - 'LICENSE'
    branches:
      - '**'        # matches every branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      dockerImage:
        description: 'Name of Docker Image to carry out scan of'
        required: true
        default: 'neo4j:4.4.5'

# Global environment variables
env:
  DEFAULT_APP_NAME: "Docker-SBOM-Scan"
  DEFAULT_DOCKER_IMAGE: "neo4j:4.4.5"
  #FCLI_VER: "v1.3"
  FCLI_VER: "dev_2.0.0-beta"
  SCANCENTRAL_VER: "23.1.0"

jobs:

  FoD-SBOM-Scan:
    runs-on: ubuntu-latest

    # Checkout the code
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          # Fetch at least the immediate parents so that if this is a pull request then we can checkout the head.
          fetch-depth: 2
      # If this run was triggered by a pull request event, then checkout the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}

      - name: Set Docker Image Name
        shell: bash
        run: |
          echo "${{ toJSON(github.event.inputs) }}"
          if [[ -z "$DOCKER_IMAGE_FROM_INPUTS" ]]; then
            echo "::debug::Setting DOCKER_IMAGE environment variable to default: $DEFAULT_DOCKER_IMAGE"
            echo "DOCKER_IMAGE=$(echo ${DEFAULT_DOCKER_IMAGE})" >> $GITHUB_ENV
          else
            echo "::debug::Setting DOCKER_IMAGE_NAME environment variable to input override: $DOCKER_IMAGE_FROM_INPUTS"
            echo "DOCKER_IMAGE=$(echo ${DOCKER_IMAGE_FROM_INPUTS})" >> $GITHUB_ENV
          fi
        env:
          DOCKER_IMAGE_FROM_INPUTS: ${{ github.event.inputs.dockerImage }}

      # Java is required to run the various Fortify utilities.
      # Setup JDK 11 on host
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # set the FOD app name to be used throughout the workflow
      - name: Set FoD app name
        shell: bash
        run: |
          if [[ -z "$APP_NAME_OVERRIDE" ]]; then
            echo "::debug::Setting FOD_APP_NAME environment variable to default: $DEFAULT_APP_NAME"
            echo "FOD_APP_NAME=$(echo ${DEFAULT_APP_NAME})" >> $GITHUB_ENV
          else
            echo "::debug::Setting FOD_APP_NAME environment variable to override: $APP_NAME_OVERRIDE"
            echo "FOD_APP_NAME=$(echo ${APP_NAME_OVERRIDE})" >> $GITHUB_ENV
          fi
        env:
          DEFAULT_APP_NAME: ${{ env.DEFAULT_APP_NAME }}
          APP_NAME_OVERRIDE: ${{ vars.FOD_APP_NAME }}
        id: set_fod_app_name


      # Get the branch name or pr number
      #- name: Extract branch name
      #  shell: bash
      #  run: |
      #    if [[ $GITHUB_REF == *"refs/pull/"* ]]; then
      #      BRANCH_NAME="$(echo ${GITHUB_REF#refs/pull/})"
      #      PR_NUMBER="$(echo ${BRANCH_NAME%/merge})"
      #      BRANCH_NAME="[PR]${SOURCE_BRANCH}#${PR_NUMBER}"
      #    else
      #      BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/})"
      #    fi
      #    echo "::debug::branch=${BRANCH_NAME}"
      #    echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
      #  env:
      #    SOURCE_BRANCH: ${{ github.head_ref }}
      #  id: extract_branch

      # Install Fortify Command Line (fcli) tool
      - name: Install fcli
        shell: bash
        run: |
          mkdir -p $HOME/fcli/bin
          curl -fsSL https://github.com/fortify-ps/fcli/releases/download/${FCLI_VER}/fcli-linux.tgz | tar -zxvf - -C $HOME/fcli/bin
          echo "::debug::PATH=$HOME/fcli/bin"
          echo "$HOME/fcli/bin" >> $GITHUB_PATH

      # Login to Fortify on Demand fcli session
      - name: Login fcli
        shell: bash
        run: |
          fcli --version
          fcli fod session login --url $FOD_API_URI --client-id $FOD_CLIENT_ID --client-secret $FOD_CLIENT_SECRET --session github-actions
        env:
          FOD_API_URI: ${{ vars.FOD_API_URI }}
          FOD_CLIENT_ID: ${{ secrets.FOD_CLIENT_ID }}
          FOD_CLIENT_SECRET: ${{ secrets.FOD_CLIENT_SECRET }}

      # Create FoD release for docker image - if it doesn't already exist
      - name: Create FoD release
        shell: bash
        run: |
          echo fcli fod release create "${FOD_RELEASE_NAME}" --delim "#" --description "Created automatically from GitHub" --status Development --skip-if-exists -o expr="{releaseId}" --session github-actions
          RELID=$(fcli fod release create "${FOD_RELEASE_NAME}" --delim "#" --description "Created automatically from GitHub" --status Development --skip-if-exists -o expr="{releaseId}" --session github-actions)
          echo "::debug::Created FOD_RELEASE_ID=${RELID}"
          echo "FOD_RELEASE_ID=${RELID}" >> $GITHUB_OUTPUT
        id: create_fod_release
        env:
          FOD_RELEASE_NAME: ${{ format('{0}#{1}', env.FOD_APP_NAME, env.DOCKER_IMAGE) }}

      #
      - name: Create SBOM from Docker Image
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.DOCKER_IMAGE }}
          output-file: ${{ github.workspace }}
          artifact-name: bom.json
          format: cyclonedx-json
          #registry-username: ${{ secrets.REGISTER_USERNAME }}
          #registry-password: ${{ secrets.REGISTRY_PASSWORD }}

      # Since this is a simple project we can simply Zip up source rather than use scancentral command from above
      - name: Package Code + Dependencies
        uses: TheDoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          directory: ${{ github.workspace }}
          filename: 'package.zip'
          exclusions: '*.git* *.idea* bin README* LICENSE'

      # Start Fortify on Demand OSS scan and wait until results complete.
      - name: Perform OSS scan
        shell: bash
        run: |
          fcli fod oss-scan start --delim "#" --release "${FOD_RELEASE_ID}" -f $PACKAGE_FILE --store curScan --session github-actions
          sleep 5
          fcli fod oss-scan wait-for ::curScan:: --session github-actions
        id: perform_oss_scan
        env:
          PACKAGE_FILE: "package.zip"
          #FOD_RELEASE_NAME: ${{ format('{0}#{1}', env.FOD_APP_NAME, github.event.inputs.dockerImage) }}
          FOD_RELEASE_ID: ${{ steps.create_fod_release.output.FOD_RELEASE_ID }}

      # Pull SAST issues from Fortify on Demand and generate GitHub-optimized SARIF output
      #- name: Export Results
      #  uses: fortify/gha-export-vulnerabilities@v1.0.2
      #  with:
      #    fod_base_url: ${{ vars.FOD_BASE_URL }}
      #    fod_client_id: ${{ secrets.FOD_CLIENT_ID }}
      #    fod_client_secret: ${{ secrets.FOD_CLIENT_SECRET }}
      #    fod_release_name: ${{ format('{0}:{1}', env.FOD_APP_NAME, steps.extract_branch.outputs.branch) }}

      # Check if SARIF output file has been created
      #- name: Check file existence
      #  id: check_files_fod
      #  uses: andstor/file-existence-action@v2
      #  with:
      #    files: "./gh-fortify-sast.sarif"

      # Import Fortify SAST results to GitHub Security Code Scanning
      #- name: Import Results
      #  if: steps.check_files_fod.outputs.files_exists == 'true'
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: ./gh-fortify-sast.sarif

      # Logout/Close Fortify on Demand fcli session
      - name: Logout fcli
        shell: bash
        run: |
          fcli fod session logout --session github-actions
